using Pharmacy.Domain;
using Pharmacy.InvoiceSearch;
using Pharmacy.Properties;
using Pharmacy.Service;
using Pharmacy.Utils;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Text.RegularExpressions;

namespace Pharmacy
{
    public partial class InvoicesInput : Form
    {
        InvoiceService invService = new InvoiceService();
        InvoiceItemServices initService = new InvoiceItemServices();
        Invoices invoice = new Invoices();
        InvoiceItems init = new InvoiceItems();
        public static String cusID = String.Empty;
        public static String drugID = String.Empty;
        DataTable dbitem = new DataTable();
        public InvoicesInput()
        {
            AccountService accService = new AccountService();
            Settings.accLogin = accService.getById(2);
            InitializeComponent();
        }
        private string autogeneratedid()
        {
            int newid = invService.getidlist() + 1;
            string EmtyFill = "";
            if (newid < 1000)
                EmtyFill += "0";
            if (newid < 100)
                EmtyFill += "0";
            if (newid < 10)
                EmtyFill += "0";

            return "I" + EmtyFill + newid;
        }

        private void InvoicesInput_Load(object sender, EventArgs e)
        {
            tb_user.Text = Settings.accLogin.Name;
            tb_cus.AutoCompleteMode = AutoCompleteMode.Suggest;
            tb_cus.AutoCompleteSource = AutoCompleteSource.CustomSource;
            AutoCompleteStringCollection collection = new AutoCompleteStringCollection();
            collection.AddRange(invService.getcussuggess(tb_cus.Text));
            tb_cus.AutoCompleteCustomSource = collection;


            tb_drug.AutoCompleteMode = AutoCompleteMode.Suggest;
            tb_drug.AutoCompleteSource = AutoCompleteSource.CustomSource;
            AutoCompleteStringCollection collection2 = new AutoCompleteStringCollection();
            collection2.AddRange(invService.getdrugsuggess(tb_drug.Text));
            tb_drug.AutoCompleteCustomSource = collection2;
            dbitem = initService.dsGetAll(Constants.INIT_INID,true).Tables[0].Clone();
            dtv_drug.DataSource = dbitem;
            tb_id.Text =  autogeneratedid();

        }

        private void bt_searchcus_Click(object sender, EventArgs e)
        {
            SearchCustomer sc = new SearchCustomer(this);
            sc.ShowDialog();
        }
        public void searchcusvalue(string name, string id)
        {
            lb_cusid.Text = id;
            tb_cus.Text = name;
        
        }
        public void searchdrugvalue(string name, string id)
        {
            lb_drugid.Text = id;
            tb_drug.Text = name;

        }

        private void tb_cus_Leave(object sender, EventArgs e)
        {
            lb_cusid.Text = invService.getcusidfromsearch(tb_cus.Text);
        }

        private void tb_drug_Leave(object sender, EventArgs e)
        {
            lb_drugid.Text = invService.getdrugidfromsearch(tb_drug.Text);
        }

        private void tb_qty_KeyPress(object sender, KeyPressEventArgs e)
        {
            if (!char.IsControl(e.KeyChar) && !char.IsDigit(e.KeyChar) && (e.KeyChar != '.'))
            {
                e.Handled = true;
            }


            if ((e.KeyChar == '.') && ((sender as TextBox).Text.IndexOf('.') > -1))
            {
                e.Handled = true;
            }
        }

        private void addToolStripMenuItem_Click(object sender, EventArgs e)
        {
            if (lb_drugid.Text != string.Empty && tb_qty.Text != String.Empty && tb_paideach.Text != string.Empty)
                dbitem.Rows.Add(tb_id.Text,dbitem.Rows.Count+1,lb_drugid.Text,tb_qty.Text,tb_paideach.Text);
            dtv_drug.DataSource = dbitem;
            changetext();
        }

        private void removeToolStripMenuItem_Click(object sender, EventArgs e)
        {
            int index = dtv_drug.CurrentCell.RowIndex;
            dbitem.Rows.RemoveAt(index);
            dtv_drug.DataSource = dbitem;
            changetext();
        }

        private void tb_drug_Enter(object sender, EventArgs e)
        {

        }

        private void tb_drug_KeyDown(object sender, KeyEventArgs e)
        {

        }

        private void editToolStripMenuItem_Click(object sender, EventArgs e)
        {
            int index = dtv_drug.CurrentCell.RowIndex;
            dbitem.Rows[index][Constants.INIT_DRUG] = lb_drugid.Text;
            dbitem.Rows[index][Constants.INIT_QTY] = tb_qty.Text;
            dbitem.Rows[index][Constants.INIT_PAID] = tb_paideach.Text;
            dtv_drug.DataSource = dbitem;
            changetext();
        }

        private void dtv_drug_CellContentClick(object sender, DataGridViewCellEventArgs e)
        {
            
        }

        private void dtv_drug_SelectionChanged(object sender, EventArgs e)
        {
            int index = 0;
            if(dtv_drug.CurrentCell != null) 
             index = dtv_drug.CurrentCell.RowIndex ;
            if (index != 0)
            {
                try
                {
                    lb_drugid.Text = dbitem.Rows[index][Constants.INIT_DRUG].ToString();
                    tb_drug.Text = invService.getBySQL("select " + Constants.DRUG_NAME + " from " + Constants.DRUG_TB + " where " + Constants.ID + "= " + lb_drugid.Text, Constants.DRUG_NAME, true).Tables[0].Rows[0][0].ToString();
                    tb_qty.Text = dbitem.Rows[index][Constants.INIT_QTY].ToString();
                    tb_paideach.Text = dbitem.Rows[index][Constants.INIT_PAID].ToString();
                }
                catch (Exception ex) { }
            }
        }

        private void changetext()
        {
            if (dbitem.Rows.Count == 0)
            {
                lb_subtotal.Text = "Sub total:0";
                lb_total.Text = "Total : 0";
            }
            else
            {
                double subtotal = 0;
                foreach (DataRow rw in dbitem.Rows)
                {
                    subtotal += double.Parse(rw[Constants.INIT_QTY].ToString()) * double.Parse(rw[Constants.INIT_PAID].ToString());
                    
                }
                lb_subtotal.Text = "Sub total:$" + subtotal;
                lb_total.Text = "Total : $" + (double)(subtotal * 13 / 100 + subtotal);
            }
        }

        private void bt_searchdrug_Click(object sender, EventArgs e)
        {
            SearchDrug sc = new SearchDrug(this);
            sc.ShowDialog();
        }

        private void bt_clear_Click(object sender, EventArgs e)
        {
            clearitem();
        }
        private void clearitem()
        {
            autogeneratedid();
            dtp_createdate.Value = DateTime.Now;
            tb_cus.Text = "";
            lb_cusid.Text = "";
            tb_drug.Text = "";
            lb_drugid.Text = "";
            tb_des.Text = "";
            tb_doc.Text = "";
            tb_docdes.Text = "";
            tb_qty.Text = "";
            tb_paideach.Text = "";
            dbitem.Clear();
            dtv_drug.DataSource = dbitem;
            changetext();
        }

        private void bt_save_Click(object sender, EventArgs e)
        {
            if (validate())
            {
                Invoices newinvoices = new Invoices();
                newinvoices.In_ID = tb_id.Text;
                Customers temp = new Customers();
                temp.Id= int.Parse( lb_cusid.Text);
                newinvoices.CustomerID = temp;
                newinvoices.Description = tb_des.Text;
                newinvoices.CreateDate = dtp_createdate.Value;
                newinvoices.CreateBy = Settings.accLogin ;
                newinvoices.DocName = tb_doc.Text;
                newinvoices.DocDes = tb_docdes.Text;
                newinvoices.Total = Double.Parse(Regex.Match(lb_total.Text, @"\d+[\.,]?\d*$").Value);


                if (invService.insertObject(newinvoices))
                {
                    foreach (DataRow rw in dbitem.Rows)
                    {
                        InvoiceItems iit = new InvoiceItems();
                        Drugs drugid = new Drugs();
                        drugid.Id = int.Parse( rw[Constants.INIT_DRUG].ToString());
                        iit.Drug_ID = drugid;
                        iit.ItemNum = int.Parse(rw[Constants.INIT_ITEM].ToString());
                        iit.In_ID = newinvoices;
                        iit.PaidEach = double.Parse(rw[Constants.INIT_PAID].ToString());
                        iit.Quantity = int.Parse(rw[Constants.INIT_ITEM].ToString());
                        if (initService.insertObject(iit))
                        {
                            int i = 0;
                        }
                    }
                    bt_clear.PerformClick();
                }
            }         
        }
        private Boolean validate()
        {
            bool check = true;
            if (lb_cusid.Text.Trim() == String.Empty)
            { check = false; }
            else if (lb_drugid.Text.Trim() == String.Empty)
            { check = false; }
            else if(dtv_drug.RowCount == 0)
            { check = false; }
                return check;
        }
     
    }
}
